@using Appointment_Management_Blazor.Client.Helper
@inherits LayoutComponentBase
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager
@inject IAccountClientService AccountService

<div class="d-flex flex-column min-vh-100 bg-light">
    <!-- Header -->
    <header class="navbar navbar-expand-lg navbar-dark bg-primary shadow-sm py-3">
        <div class="container">
            <a class="navbar-brand fw-bold fs-4" href="/">
                <i class="bi bi-calendar2-week-fill me-2"></i>AppointPro
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarMain">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse" id="navbarMain">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    @if (IsAuthenticated)
                    {
                        if (userRoles.Contains("Admin", StringComparer.OrdinalIgnoreCase))
                        {
                            <li class="nav-item">
                                <NavLink class="nav-link" href="/Patient">Patients</NavLink>
                            </li>
                            <li class="nav-item">
                                <NavLink class="nav-link" href="/Doctor">Doctors</NavLink>
                            </li>
                        }
                        if (userRoles.Contains("Patient", StringComparer.OrdinalIgnoreCase))
                        {
                            <li class="nav-item">
                                <NavLink class="nav-link" href="/PatientAppointment">Book Appointment</NavLink>
                            </li>
                        }
                        if (userRoles.Contains("Doctor", StringComparer.OrdinalIgnoreCase))
                        {
                            <li class="nav-item">
                                <NavLink class="nav-link" href="/DoctorAppointment">Manage Appointments</NavLink>
                            </li>
                        }
                    }
                </ul>

                <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
                    @if (!IsAuthenticated)
                    {
                        <li class="nav-item">
                            <NavLink class="nav-link" href="login">
                                <i class="bi bi-box-arrow-in-right me-1"></i>Login
                            </NavLink>
                        </li>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="register">
                                <i class="bi bi-person-plus me-1"></i>Register
                            </NavLink>
                        </li>
                    }
                    else
                    {
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle d-flex align-items-center" href="#" data-bs-toggle="dropdown" aria-expanded="false">
                                @if (!string.IsNullOrEmpty(profileImagePath))
                                {
                                    <img src="@profileImagePath" class="rounded-circle me-2" style="width: 32px; height: 32px; object-fit: cover;" alt="Profile" />
                                }
                                else
                                {
                                    <img src="Screenshot_24.png" alt="Admin Photo" class="rounded-circle me-2" style="width: 32px; height: 32px; object-fit: cover;" />
                                }
                                @userEmail
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end shadow-sm">
                                <li><NavLink class="dropdown-item" href="/profile"><i class="bi bi-person me-2"></i>Profile</NavLink></li>
                                <li><NavLink class="dropdown-item" href="/change-email"><i class="bi bi-envelope me-2"></i>Change Email</NavLink></li>
                                <li><NavLink class="dropdown-item" href="/change-password"><i class="bi bi-lock me-2"></i>Change Password</NavLink></li>
                                <li><hr class="dropdown-divider" /></li>
                                <li>
                                    <button class="dropdown-item text-danger" @onclick="Logout">
                                        <i class="bi bi-box-arrow-right me-2"></i>Logout
                                    </button>
                                </li>
                            </ul>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="flex-grow-1 py-4">
        <div class="container">
            @Body
        </div>
    </main>

    <!-- Footer (optional) -->
    <footer class="bg-white text-muted py-3 shadow-sm border-top">
        <div class="container text-center">
            <small>&copy; @DateTime.Now.Year - AppointPro | All rights reserved.</small>
        </div>
    </footer>
</div>

@code {
    private IEnumerable<string> userRoles = Enumerable.Empty<string>();
    private string? userEmail;
    private string? profileImagePath; // Add this declaration
    private bool IsAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadAuthState();
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    private async void HandleLocationChanged(object? sender, EventArgs e)
    {
        await LoadAuthState();
        StateHasChanged();
    }

    private async Task LoadAuthState()
    {
        var token = await localStorage.GetItemAsync<string>("jwt_token");
        if (!string.IsNullOrEmpty(token))
        {
            try
            {
                userRoles = JwtParser.GetRolesFromToken(token);
                userEmail = JwtParser.GetEmailFromToken(token);
                IsAuthenticated = true;

                // Load profile image if authenticated
                await LoadProfileImage();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error parsing token: {ex.Message}");
                await localStorage.RemoveItemAsync("jwt_token");
                IsAuthenticated = false;
            }
        }
        else
        {
            IsAuthenticated = false;
            userRoles = Enumerable.Empty<string>();
            userEmail = null;
            profileImagePath = null;
        }
    }

    private async Task LoadProfileImage()
    {
        try
        {
            var profileResponse = await AccountService.GetProfileAsync();
            if (profileResponse != null && profileResponse.IsSuccess)
            {
                profileImagePath = profileResponse.ProfileImagePath;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading profile image: {ex.Message}");
        }
    }

    private async Task Logout()
    {
        await localStorage.RemoveItemAsync("jwt_token");
        IsAuthenticated = false;
        userRoles = Enumerable.Empty<string>();
        userEmail = null;
        profileImagePath = null; // Clear the profile image on logout
        NavigationManager.NavigateTo("/login", forceLoad: true);
    }
}