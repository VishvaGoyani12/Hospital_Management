@page "/change-password"
@inject IAccountClientService AccountService
@inject NavigationManager NavigationManager

<h3>Change Password</h3>

<EditForm Model="@Model" OnValidSubmit="@HandleChangePassword">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Current Password</label>
        <InputText type="password" @bind-Value="@Model.CurrentPassword" class="form-control" />
        <ValidationMessage For="@(() => Model.CurrentPassword)" />
    </div>

    <div class="form-group">
        <label>New Password</label>
        <InputText type="password" @bind-Value="@Model.NewPassword" class="form-control" />
        <ValidationMessage For="@(() => Model.NewPassword)" />
    </div>

    <div class="form-group">
        <label>Confirm New Password</label>
        <InputText type="password" @bind-Value="@Model.ConfirmPassword" class="form-control" />
        <ValidationMessage For="@(() => Model.ConfirmPassword)" />
    </div>

    <button type="submit" class="btn btn-primary">Change Password</button>
</EditForm>

@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert @(IsSuccess ? "alert-success" : "alert-danger") mt-3">@Message</div>
}

@code {
    private ChangePasswordViewModel Model { get; set; } = new ChangePasswordViewModel();
    private string Message { get; set; }
    private bool IsSuccess { get; set; }

    private async Task HandleChangePassword()
    {
        var result = await AccountService.ChangePasswordAsync(Model);

        IsSuccess = result.IsSuccess;
        Message = result.Message;

        if (IsSuccess)
        {
            Model = new ChangePasswordViewModel();
        }
    }
}