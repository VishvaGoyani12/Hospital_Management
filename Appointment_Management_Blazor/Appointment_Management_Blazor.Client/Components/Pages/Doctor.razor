@page "/doctor"

@inject IDoctorClientService DoctorService
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime

<h3>Doctors Management</h3>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="sr-only"></span>
        </div>
    </div>
}
else
{
    <div class="card">
        <div class="card-header">
            <!-- Single row for all controls -->
            <div class="d-flex align-items-center flex-wrap gap-2">
                <!-- Per page dropdown - leftmost -->
                <div>
                    <select class="form-select w-auto" @onchange="OnPageSizeChanged" value="@pageSize" style="min-width: 130px;">
                        <option value="10">10 per page</option>
                        <option value="20">20 per page</option>
                        <option value="50">50 per page</option>
                    </select>
                </div>

                <!-- Search -->
                <div>
                   <input type="text" class="form-control" placeholder="Search..." value="@searchValue" @oninput="OnSearchInput" />
                </div>

                <!-- Status filter -->
                <div>
                    <select class="form-select" @onchange="OnStatusFilterChanged">
                        <option value="">All Status</option>
                        <option value="true" selected="@((statusFilter == true))">Active</option>
                        <option value="false" selected="@((statusFilter == false))">Inactive</option>
                    </select>
                </div>

                <!-- Specialization filter -->
                <div>
                    <select class="form-select" @onchange="OnSpecializationFilterChanged">
                        <option value="">All Specializations</option>
                        @foreach (var spec in distinctSpecializations)
                        {
                            <option value="@spec" selected="@(spec == specialistInFilter)">@spec</option>
                        }
                    </select>
                </div>

                <!-- Add New button - right aligned -->
                <div class="ms-auto">
                    <button class="btn btn-primary" @onclick="AddNewDoctor">Add New Doctor</button>
                </div>
            </div>
        </div>

        <div class="card-body">
            @if (doctors?.Data?.Any() == true)
            {
                <table class="table table-striped table-bordered">
                    <thead>
                        <tr>
                            <th @onclick="@(() => OnSort("FullName"))" style="cursor:pointer">
                                Full Name  <i class="@GetSortIconClass("FullName")" style="margin-left: 5px;"></i>
                            </th>
                            <th @onclick="@(() => OnSort("Gender"))" style="cursor:pointer">
                                Gender  <i class="@GetSortIconClass("Gender")" style="margin-left: 5px;"></i>
                            </th>
                            <th @onclick="@(() => OnSort("SpecialistIn"))" style="cursor:pointer">
                                Specialization  <i class="@GetSortIconClass("SpecialistIn")" style="margin-left: 5px;"></i>
                            </th>
                            <th @onclick="@(() => OnSort("Status"))" style="cursor:pointer">
                                Status  <i class="@GetSortIconClass("Status")" style="margin-left: 5px;"></i>
                            </th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var doctor in doctors.Data)
                        {
                            <tr>
                                <td>@doctor?.FullName</td>
                                <td>@doctor?.Gender</td>
                                <td>@doctor?.SpecialistIn</td>
                                <td>@(doctor?.Status == true ? "Active" : "Inactive")</td>
                                <td>
                                    <button class="btn btn-info btn-sm" @onclick="() => EditDoctor(doctor.Id)">Edit</button>
                                    <button class="btn btn-danger btn-sm ms-2" @onclick="() => DeleteDoctor(doctor?.Id)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <div class="d-flex justify-content-between align-items-center mt-3">
    <div>
        <span>Total records: @totalRecords</span>
    </div>
    <div>
        <button class="btn btn-secondary me-2" @onclick="PreviousPage" disabled="@(currentPage <= 1)">Previous</button>
        <span>Page @currentPage of @totalPages</span>
        <button class="btn btn-secondary ms-2" @onclick="NextPage" disabled="@(currentPage >= totalPages)">Next</button>
    </div>
</div>

            }
            else
            {
                <div class="alert alert-info">No doctors found.</div>
            }
        </div>
    </div>
}


@if (showDialog)
{
    <div class="modal" style="display:block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(string.IsNullOrEmpty(selectedDoctorId) ? "Add New Doctor" : "Edit Doctor")</h5>
                    <button type="button" class="btn-close" @onclick="CloseDialog" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@doctorModel" OnValidSubmit="@HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group mb-3">
                            <label for="fullName">Full Name</label>
                            <InputText id="fullName" class="form-control" @bind-Value="doctorModel.FullName" />
                            <ValidationMessage For="@(() => doctorModel.FullName)" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="email">Email</label>
                            <InputText id="email" class="form-control" @bind-Value="doctorModel.Email" />
                            <ValidationMessage For="@(() => doctorModel.Email)" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="gender">Gender</label>
                            <InputSelect id="gender" class="form-select" @bind-Value="doctorModel.Gender">
                                <option value="">Select Gender</option>
                                <option value="Male">Male</option>
                                <option value="Female">Female</option>
                                <option value="Other">Other</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => doctorModel.Gender)" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="specialistIn">Specialization</label>
                            <InputText id="specialistIn" class="form-control" @bind-Value="doctorModel.SpecialistIn" />
                            <ValidationMessage For="@(() => doctorModel.SpecialistIn)" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="status">Status</label>
                            <InputSelect id="status" class="form-select" @bind-Value="doctorModel.Status">
                                <option value="true">Active</option>
                                <option value="false">Inactive</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => doctorModel.Status)" />
                        </div>

                        @if (string.IsNullOrEmpty(selectedDoctorId))
                        {
                            <div class="form-group mb-3">
                                <label for="password">Password</label>
                                <InputText type="password" id="password" class="form-control" @bind-Value="doctorModel.Password" />
                                <ValidationMessage For="@(() => doctorModel.Password)" />
                            </div>

                            <div class="form-group mb-3">
                                <label for="confirmPassword">Confirm Password</label>
                                <InputText type="password" id="confirmPassword" class="form-control" @bind-Value="doctorModel.ConfirmPassword" />
                                <ValidationMessage For="@(() => doctorModel.ConfirmPassword)" />
                            </div>
                        }

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseDialog">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private DoctorListResponse doctors = new();
    private DoctorViewModel doctorModel = new();
    private string selectedDoctorId = string.Empty;
    private bool showDialog = false;
    private bool isLoading = true;
    private string searchValue = string.Empty;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalRecords = 0;
    private int totalPages => (int)Math.Ceiling((double)totalRecords / pageSize);
    private CancellationTokenSource? cts;

    // Sorting
    private string? sortColumn;
    private string sortDirection = "asc";

    // Filters
    private bool? statusFilter = null;
    private string? specialistInFilter = null;

    private List<string> distinctSpecializations = new();

    // Debounce timer
    private System.Timers.Timer? debounceTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadDoctors();
    }

    private async Task LoadDoctors()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var token = await LocalStorage.GetItemAsync<string>("jwt_token");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            var filters = new DoctorFilterModel
            {
                Draw = currentPage,
                Start = (currentPage - 1) * pageSize,
                Length = pageSize,
                SearchValue = searchValue,
                Status = statusFilter,
                SpecialistIn = specialistInFilter,
                SortColumn = sortColumn,
                SortDirection = sortDirection
            };

            doctors = await DoctorService.GetAllDoctorsAsync(filters);

            if (doctors == null || doctors.Data == null)
            {
                doctors = new DoctorListResponse { Data = new List<DoctorDto>() };
            }

            totalRecords = doctors.RecordsTotal;

            distinctSpecializations = doctors.Data.Select(d => d.SpecialistIn).Distinct().OrderBy(s => s).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading doctors: {ex.Message}");
            doctors = new DoctorListResponse { Data = new List<DoctorDto>() };

            if (ex.Message.Contains("401") || ex.Message.Contains("Unauthorized"))
            {
                NavigationManager.NavigateTo("/login");
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async void OnSearchInput(ChangeEventArgs e)
{
    searchValue = e.Value?.ToString() ?? string.Empty;

    debounceTimer?.Stop();
    debounceTimer?.Dispose();

    debounceTimer = new System.Timers.Timer(500);
    debounceTimer.Elapsed += async (_, _) =>
    {
        debounceTimer?.Stop();
        debounceTimer?.Dispose();
        debounceTimer = null;

        await InvokeAsync(async () =>
        {
            currentPage = 1;
            await LoadDoctors();
            StateHasChanged();
        });
    };
    debounceTimer.AutoReset = false;
    debounceTimer.Start();
}


    // Status filter change
    private async Task OnStatusFilterChanged(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        if (string.IsNullOrEmpty(value))
            statusFilter = null;
        else if (bool.TryParse(value, out var parsed))
            statusFilter = parsed;

        currentPage = 1;
        await LoadDoctors();
    }

    // Specialization filter change
    private async Task OnSpecializationFilterChanged(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        if (string.IsNullOrEmpty(value))
            specialistInFilter = null;
        else
            specialistInFilter = value;

        currentPage = 1;
        await LoadDoctors();
    }

    private async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var size))
        {
            pageSize = size;
            currentPage = 1;
            await LoadDoctors();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadDoctors();
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadDoctors();
        }
    }

    private async Task AddNewDoctor()
    {
        doctorModel = new DoctorViewModel();
        selectedDoctorId = string.Empty;
        showDialog = true;
    }

    private async Task EditDoctor(string id)
    {
        if (string.IsNullOrEmpty(id)) return;

        var doctor = await DoctorService.GetDoctorByIdAsync(id);
        if (doctor != null)
        {
            doctorModel = new DoctorViewModel
            {
                ApplicationUserId = id,
                FullName = doctor.FullName,
                Email = doctor.Email,
                Gender = doctor.Gender,
                SpecialistIn = doctor.SpecialistIn,
                Status = doctor.Status
            };
            selectedDoctorId = id;
            showDialog = true;
        }
    }

    private async Task DeleteDoctor(string id)
    {
        if (string.IsNullOrEmpty(id)) return;

        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this doctor?");
        if (confirm)
        {
            var result = await DoctorService.DeleteDoctorAsync(id);
            if (result.Success)
            {
                await LoadDoctors();
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            ApiResponse result;
            if (string.IsNullOrEmpty(selectedDoctorId))
            {
                result = await DoctorService.CreateDoctorAsync(doctorModel);
            }
            else
            {
                result = await DoctorService.UpdateDoctorAsync(doctorModel);
            }

            if (result.Success)
            {
                showDialog = false;
                await LoadDoctors();
                await JSRuntime.InvokeVoidAsync("alert", result.Message ?? "Operation completed successfully");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", result.Message ?? "Operation failed");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private void CloseDialog()
    {
        showDialog = false;
    }

    private void OnSort(string column)
    {
        if (sortColumn == column)
        {
            sortDirection = sortDirection == "asc" ? "desc" : "asc";
        }
        else
        {
            sortColumn = column;
            sortDirection = "asc";
        }
        currentPage = 1;
        _ = LoadDoctors();
    }
    private string GetSortIconClass(string column)
{
    if (sortColumn != column)
        return "bi bi-chevron-expand text-muted"; 
    
    return sortDirection == "asc" ? "bi bi-caret-up-fill text-primary" : "bi bi-caret-down-fill text-primary";
}

}
