@page "/doctor"

@inject IDoctorClientService DoctorService
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime

<h3>Doctors Management</h3>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="sr-only"></span>
        </div>
    </div>
}
else
{
    <div class="card">
        <div class="card-header">
            <div class="row">
                <div class="col-md-6">
                    <button class="btn btn-primary" @onclick="AddNewDoctor">Add New Doctor</button>
                </div>
                <div class="col-md-6 text-right">
                    <input type="text" class="form-control" placeholder="Search..." @bind="searchValue" @bind:event="oninput" />
                </div>
            </div>
        </div>
        <div class="card-body">
            @if (doctors?.Data?.Any() == true)
            {
                <table class="table table-striped table-bordered">
                    <thead>
                        <tr>
                            <th>Full Name</th>
                            <th>Gender</th>
                            <th>Specialization</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var doctor in doctors.Data)
                        {
                            <tr>
                                <td>@doctor?.FullName</td>
                                <td>@doctor?.Gender</td>
                                <td>@doctor?.SpecialistIn</td>
                                <td>@(doctor?.Status == true ? "Active" : "Inactive")</td>
                                <td>
                                    <button class="btn btn-info btn-sm" @onclick="() => EditDoctor(doctor.Id)">Edit</button>
                                    <button class="btn btn-danger btn-sm ml-2" @onclick="() => DeleteDoctor(doctor?.Id)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="row">
                    <div class="col-md-6">
                        <span>Total records: @totalRecords</span>
                    </div>
                    <div class="col-md-6 text-right">
                        <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@(currentPage <= 1)">Previous</button>
                        <span class="mx-2">Page @currentPage of @((int)Math.Ceiling((double)totalRecords / pageSize))</span>
                        <button class="btn btn-secondary" @onclick="NextPage" disabled="@(currentPage* pageSize >= totalRecords)">Next</button>
                    </div>
                </div>
            }
            else
            {
                <div class="alert alert-info">No doctors found.</div>
            }
        </div>
    </div>
}

@if (showDialog)
{
    <div class="modal" style="display:block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(string.IsNullOrEmpty(selectedDoctorId) ? "Add New Doctor" : "Edit Doctor")</h5>
                    <button type="button" class="close" @onclick="CloseDialog">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@doctorModel" OnValidSubmit="@HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label for="fullName">Full Name</label>
                            <InputText id="fullName" class="form-control" @bind-Value="doctorModel.FullName" />
                            <ValidationMessage For="@(() => doctorModel.FullName)" />
                        </div>

                        <div class="form-group">
                            <label for="email">Email</label>
                            <InputText id="email" class="form-control" @bind-Value="doctorModel.Email" />
                            <ValidationMessage For="@(() => doctorModel.Email)" />
                        </div>

                        <div class="form-group">
                            <label for="gender">Gender</label>
                            <InputSelect id="gender" class="form-control" @bind-Value="doctorModel.Gender">
                                <option value="">Select Gender</option>
                                <option value="Male">Male</option>
                                <option value="Female">Female</option>
                                <option value="Other">Other</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => doctorModel.Gender)" />
                        </div>

                        <div class="form-group">
                            <label for="specialistIn">Specialization</label>
                            <InputText id="specialistIn" class="form-control" @bind-Value="doctorModel.SpecialistIn" />
                            <ValidationMessage For="@(() => doctorModel.SpecialistIn)" />
                        </div>

                        <div class="form-group">
                            <label for="status">Status</label>
                            <InputSelect id="status" class="form-control" @bind-Value="doctorModel.Status">
                                <option value="true">Active</option>
                                <option value="false">Inactive</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => doctorModel.Status)" />
                        </div>

                        @if (string.IsNullOrEmpty(selectedDoctorId))
                        {
                            <div class="form-group">
                                <label for="password">Password</label>
                                <InputText type="password" id="password" class="form-control" @bind-Value="doctorModel.Password" />
                                <ValidationMessage For="@(() => doctorModel.Password)" />
                            </div>

                            <div class="form-group">
                                <label for="confirmPassword">Confirm Password</label>
                                <InputText type="password" id="confirmPassword" class="form-control" @bind-Value="doctorModel.ConfirmPassword" />
                                <ValidationMessage For="@(() => doctorModel.ConfirmPassword)" />
                            </div>
                        }

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseDialog">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private DoctorListResponse doctors = new();
    private DoctorViewModel doctorModel = new();
    private string selectedDoctorId = string.Empty;
    private bool showDialog = false;
    private bool isLoading = true;
    private string searchValue = string.Empty;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalRecords = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadDoctors();
    }


    private async Task LoadDoctors()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var filters = new DoctorFilterModel
                {
                    Draw = currentPage,
                    Start = (currentPage - 1) * pageSize,
                    Length = pageSize,
                    SearchValue = searchValue
                };

            doctors = await DoctorService.GetAllDoctorsAsync(filters);
            totalRecords = doctors.RecordsTotal;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading doctors: {ex.Message}");
            doctors = new DoctorListResponse();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }


    private void AddNewDoctor()
    {
        doctorModel = new DoctorViewModel();
        selectedDoctorId = string.Empty;
        showDialog = true;
    }

    private async Task EditDoctor(string id)
{
    if (string.IsNullOrEmpty(id)) return;

    var doctor = await DoctorService.GetDoctorByIdAsync(id);
    if (doctor != null)
    {
        doctorModel = new DoctorViewModel
        {
            ApplicationUserId = id, // Make sure we're using the parameter, not doctor.Id
            FullName = doctor.FullName,
            Email = doctor.Email,
            Gender = doctor.Gender,
            SpecialistIn = doctor.SpecialistIn,
            Status = doctor.Status
        };
        selectedDoctorId = id;
        showDialog = true;
    }
}


    private async Task DeleteDoctor(string id)
    {
        if (string.IsNullOrEmpty(id)) return;

        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this doctor?");
        if (confirm)
        {
            var result = await DoctorService.DeleteDoctorAsync(id);
            if (result.Success)
            {
                await LoadDoctors();
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            ApiResponse result;
            if (string.IsNullOrEmpty(selectedDoctorId))
            {
                result = await DoctorService.CreateDoctorAsync(doctorModel);
            }
            else
            {
                result = await DoctorService.UpdateDoctorAsync(doctorModel);
            }

            if (result.Success)
            {
                showDialog = false;
                await LoadDoctors();
                await JSRuntime.InvokeVoidAsync("alert", result.Message ?? "Operation completed successfully");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", result.Message ?? "Operation failed");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private void CloseDialog()
    {
        showDialog = false;
    }

    private async Task NextPage()
    {
        currentPage++;
        await LoadDoctors();
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadDoctors();
        }
    }
}