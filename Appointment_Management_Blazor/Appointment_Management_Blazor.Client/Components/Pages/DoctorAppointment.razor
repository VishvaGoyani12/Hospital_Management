@page "/doctorappointment"
@using Appointment_Management_Blazor.Shared.Models.DTOs
@inject IDoctorAppointmentClientService AppointmentService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorage

<h3 class="mb-4">Appointment Management</h3>
@if (appointmentStats != null)
{
    <div class="row g-3 mb-4">
        <div class="col-md-3">
            <div class="card shadow-sm border-0" style="background-color: #fdfdfd;">
                <div class="card-body p-3">
                    <div class="d-flex align-items-center">
                        <div class="bg-primary bg-opacity-10 p-3 rounded-3 me-3">
                            <i class="bi bi-calendar-check fs-4 text-primary"></i>
                        </div>
                        <div>
                            <h6 class="text-muted mb-1">Total Appointments</h6>
                            <h4 class="mb-0 fw-bold">@appointmentStats.TotalAppointments</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="card shadow-sm border-0" style="background-color: #fdfdfd;">
                <div class="card-body p-3">
                    <div class="d-flex align-items-center">
                        <div class="bg-warning bg-opacity-10 p-3 rounded-3 me-3">
                            <i class="bi bi-hourglass-split fs-4 text-warning"></i>
                        </div>
                        <div>
                            <h6 class="text-muted mb-1">Pending</h6>
                            <h4 class="mb-0 fw-bold">@appointmentStats.PendingAppointments</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="card shadow-sm border-0" style="background-color: #fdfdfd;">
                <div class="card-body p-3">
                    <div class="d-flex align-items-center">
                        <div class="bg-success bg-opacity-10 p-3 rounded-3 me-3">
                            <i class="bi bi-check-circle fs-4 text-success"></i>
                        </div>
                        <div>
                            <h6 class="text-muted mb-1">Confirmed</h6>
                            <h4 class="mb-0 fw-bold">@appointmentStats.ConfirmedAppointments</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="card shadow-sm border-0" style="background-color: #fdfdfd;">
                <div class="card-body p-3">
                    <div class="d-flex align-items-center">
                        <div class="bg-danger bg-opacity-10 p-3 rounded-3 me-3">
                            <i class="bi bi-x-circle fs-4 text-danger"></i>
                        </div>
                        <div>
                            <h6 class="text-muted mb-1">Cancelled</h6>
                            <h4 class="mb-0 fw-bold">@appointmentStats.CancelledAppointments</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@if (isLoading)
{
    <div class="text-center my-5">
        <div class="spinner-border text-primary" role="status"></div>
    </div>
}
else
{
    <div class="card shadow-sm border-0">
        <div class="card-header bg-light">
            <div class="d-flex flex-wrap align-items-center gap-2">
                <select class="form-select w-auto" @onchange="OnPageSizeChanged" value="@pageSize">
                    <option value="10">10 per page</option>
                    <option value="20">20 per page</option>
                    <option value="50">50 per page</option>
                </select>

                <input type="text" class="form-control w-auto" placeholder="Search..." value="@searchValue" @oninput="OnSearchInput" />

                <select class="form-select w-auto" @onchange="OnStatusFilterChanged">
                    <option value="">All Statuses</option>
                    <option value="Pending" selected="@(statusFilter == "Pending")">Pending</option>
                    <option value="Confirmed" selected="@(statusFilter == "Confirmed")">Confirmed</option>
                    <option value="Cancelled" selected="@(statusFilter == "Cancelled")">Cancelled</option>
                </select>
            </div>
        </div>

        <div class="card-body">
            @if (appointments?.Data?.Any() == true)
            {
                <table class="table table-striped table-bordered table-hover align-middle" style="background-color: #fdfdfd;">
                    <thead class="table-light" style="background-color: #eaf1f8;">
                        <tr>
                            <th @onclick="@(() => OnSort("PatientName"))" style="cursor:pointer">
                                Patient <i class="@GetSortIconClass("PatientName") ms-1"></i>
                            </th>
                            <th @onclick="@(() => OnSort("AppointmentDate"))" style="cursor:pointer">
                                Date <i class="@GetSortIconClass("AppointmentDate") ms-1"></i>
                            </th>
                            <th @onclick="@(() => OnSort("Description"))" style="cursor:pointer">
                                Description <i class="@GetSortIconClass("Description") ms-1"></i>
                            </th>
                            <th @onclick="@(() => OnSort("Status"))" style="cursor:pointer">
                                Status <i class="@GetSortIconClass("Status") ms-1"></i>
                            </th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var appointment in appointments.Data)
                        {
                            <tr>
                                <td>@appointment?.PatientName</td>
                                <td>@appointment?.AppointmentDate.ToString("yyyy-MM-dd HH:mm")</td>
                                <td>@appointment?.Description</td>
                                <td>
                                    <span class="badge bg-@(appointment.Status switch
                                    {
                                        "Pending" => "warning",
                                        "Confirmed" => "success",
                                        "Cancelled" => "secondary",
                                        _ => "dark"
                                    })">
                                        @appointment.Status
                                    </span>
                                </td>
                                <td>
    @if (CanUpdate(appointment.Status))
    {
        <select class="form-select form-select-sm w-auto"
                value=""
                @onchange="async e => await UpdateStatus(appointment.Id, e.Value?.ToString())">
            <option disabled value="">Change Status</option>
            <option value="Confirmed">Confirmed</option>
            <option value="Cancelled">Cancelled</option>
        </select>
    }
    else
    {
        @appointment.Status
    }
</td>

                            </tr>
                        }
                    </tbody>
                </table>

                <div class="d-flex justify-content-between align-items-center mt-3">
                    <span>Total records: @totalRecords</span>
                    <div>
                        <button class="btn btn-outline-secondary btn-sm me-2" @onclick="PreviousPage" disabled="@(currentPage <= 1)">
                            <i class="bi bi-chevron-left"></i> Prev
                        </button>
                        <span>Page @currentPage of @totalPages</span>
                        <button class="btn btn-outline-secondary btn-sm ms-2" @onclick="NextPage" disabled="@(currentPage >= totalPages)">
                            Next <i class="bi bi-chevron-right"></i>
                        </button>
                    </div>
                </div>
            }
            else
            {
                <div class="alert alert-info">No appointments found.</div>
            }
        </div>
    </div>
}


@code {
    private AppointmentListResponse appointments = new();
    private AppointmentStatsDto? appointmentStats;
    private bool isLoading = true;
    private string searchValue = string.Empty;
    private string statusFilter = string.Empty;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalRecords = 0;
    private int totalPages => (int)Math.Ceiling((double)totalRecords / pageSize);
    private int doctorId;
    
    // Sorting
    private string? sortColumn;
    private string sortDirection = "asc";

    private System.Timers.Timer? debounceTimer;

    protected override async Task OnInitializedAsync()
    {
        if (!await RoleGuard.HasRoleAsync(LocalStorage, "Doctor"))
        {
            NavigationManager.NavigateTo("/access-denied", forceLoad: true);
        }
        await LoadAppointments();
    } 

    private async Task LoadAppointments()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            appointmentStats = await AppointmentService.GetAppointmentStatsAsync();
            var filters = new AppointmentFilterModel
            {
                Draw = currentPage,
                Start = (currentPage - 1) * pageSize,
                Length = pageSize,
                SearchValue = searchValue,
                Status = statusFilter,
                SortColumn = sortColumn,
                SortDirection = sortDirection,
                DoctorId = doctorId
            };

            var response = await AppointmentService.GetAllAppointmentsAsync(filters);

            if (response != null)
            {
                appointments = response;
                totalRecords = response.RecordsTotal;
            }
            else
            {
                appointments = new AppointmentListResponse();
                totalRecords = 0;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading appointments: {ex.Message}");
            appointments = new AppointmentListResponse();
            totalRecords = 0;

            if (ex.Message.Contains("401") || ex.Message.Contains("Unauthorized"))
            {
                NavigationManager.NavigateTo("/login");
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async void OnSearchInput(ChangeEventArgs e)
    {
        searchValue = e.Value?.ToString() ?? string.Empty;

        debounceTimer?.Stop();
        debounceTimer?.Dispose();

        debounceTimer = new System.Timers.Timer(500);
        debounceTimer.Elapsed += async (_, _) =>
        {
            debounceTimer?.Stop();
            debounceTimer?.Dispose();
            debounceTimer = null;

            await InvokeAsync(async () =>
            {
                currentPage = 1;
                await LoadAppointments();
                StateHasChanged();
            });
        };
        debounceTimer.AutoReset = false;
        debounceTimer.Start();
    }

    private async Task OnStatusFilterChanged(ChangeEventArgs e)
    {
        statusFilter = e.Value?.ToString() ?? string.Empty;
        currentPage = 1;
        await LoadAppointments();
    }

    private async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var size))
        {
            pageSize = size;
            currentPage = 1;
            await LoadAppointments();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadAppointments();
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadAppointments();
        }
    }

    private async Task UpdateStatus(int id, string? newStatus)
{
    if (string.IsNullOrWhiteSpace(newStatus)) return;

    bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to change the status to '{newStatus}'?");
    if (!confirmed)
        return;

    var result = await AppointmentService.UpdateAppointmentStatusAsync(new UpdateStatusModel
    {
        Id = id,
        Status = newStatus
    });

    if (result)
    {
        await LoadAppointments();
    }
}


    private bool CanUpdate(string status) => status == "Pending";

    private void OnSort(string column)
    {
        if (sortColumn == column)
        {
            sortDirection = sortDirection == "asc" ? "desc" : "asc";
        }
        else
        {
            sortColumn = column;
            sortDirection = "asc";
        }
        currentPage = 1;
        _ = LoadAppointments();
    }

    private string GetSortIconClass(string column)
    {
        if (sortColumn != column)
            return "bi bi-chevron-expand text-muted";
        
        return sortDirection == "asc" ? "bi bi-caret-up-fill text-primary" : "bi bi-caret-down-fill text-primary";
    }
}