@page "/login"

@inject IAccountClientService AccountClientService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@if (!string.IsNullOrEmpty(confirmationMessage))
{
    <div class="alert alert-success">
        @confirmationMessage
    </div>
}

<h3 class="text-center mb-4 fw-semibold text-primary">Login</h3>

<div class="card shadow-lg border-0" style="max-width: 600px; margin: 0 auto;">
    <div class="card-body p-4">
        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />

            <div class="form-group mb-3">
                <label for="email" class="form-label">Email *</label>
                <div class="input-group">
                    <span class="input-group-text bg-light">
                        <i class="bi bi-envelope text-muted"></i>
                    </span>
                    <InputText id="email" @bind-Value="loginModel.Email" class="form-control" placeholder="user@example.com" />
                </div>
                <ValidationMessage For="@(() => loginModel.Email)" class="text-danger" />
            </div>

            <div class="form-group mb-4">
                <label for="password" class="form-label">Password *</label>
                <div class="input-group">
                    <span class="input-group-text bg-light">
                        <i class="bi bi-lock text-muted"></i>
                    </span>
                    <InputText id="password" @bind-Value="loginModel.Password" type="password" class="form-control" placeholder="••••••••" />
                </div>
                <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
            </div>

            <div class="d-grid">
                <button type="submit" class="btn btn-primary" disabled="@isProcessing">
                    @if (isProcessing)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span> Signing in...</span>
                    }
                    else
                    {
                        <i class="bi bi-box-arrow-in-right me-1"></i>
                        <span>Sign In</span>
                    }
                </button>
            </div>
        </EditForm>


        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert @(isSuccess ? "alert-success" : "alert-danger") mt-3">
                <i class="bi @(isSuccess ? "bi-check-circle" : "bi-exclamation-triangle") me-2"></i>
                @message
            </div>
        }
    </div>

    <div class="card-footer bg-light text-center py-3">
        <div class="small">
            <a href="/register" class="text-decoration-none">Create account</a>
            <span class="mx-2 text-muted">|</span>
            <a href="/forgot-password" class="text-decoration-none">Forgot password?</a>
        </div>
    </div>
</div>


@code {
    private LoginViewModel loginModel = new LoginViewModel();
    private string message = string.Empty;
    private string? confirmationMessage;
    private bool isSuccess = false;
    private bool isProcessing = false;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("confirmed", out var confirmed) && confirmed == "true")
        {
            confirmationMessage = "Your email has been confirmed. You can now log in.";
        }
        else if (query.TryGetValue("error", out var error))
        {
            confirmationMessage = $"Email confirmation failed: {error}";
        }
    }

    private async Task HandleLogin()
    {
        isProcessing = true;
        message = string.Empty;
        StateHasChanged();

        try
        {
            var result = await AccountClientService.LoginAsync(loginModel);
            message = result.Message ?? "Login completed";
            isSuccess = result.IsSuccess;

            if (result.IsSuccess && !string.IsNullOrEmpty(result.Token))
            {
                await localStorage.RemoveItemAsync("authToken");
                await localStorage.RemoveItemAsync("jwt_token");
                await localStorage.SetItemAsync("jwt_token", result.Token);

                var roles = JwtParser.GetRolesFromToken(result.Token).ToList();
                Console.WriteLine($"ROLES FOUND: {string.Join(", ", roles)}");

                var claims = ParseAllClaims(result.Token);
                Console.WriteLine("ALL CLAIMS:");
                foreach (var claim in claims)
                {
                    Console.WriteLine($"{claim.Key}: {claim.Value}");
                }

                StateHasChanged();
                if (roles.Any(r => r.Equals("Admin", StringComparison.OrdinalIgnoreCase)))
                {
                    NavigationManager.NavigateTo("/Doctor", forceLoad: true);
                }
                else if (roles.Any(r => r.Equals("Doctor", StringComparison.OrdinalIgnoreCase)))
                {
                    NavigationManager.NavigateTo("/DoctorAppointment", forceLoad: true);
                }
                else if (roles.Any(r => r.Equals("Patient", StringComparison.OrdinalIgnoreCase)))
                {
                    NavigationManager.NavigateTo("/PatientAppointment", forceLoad: true);
                }
                else
                {
                    NavigationManager.NavigateTo("/", forceLoad: true);
                }
            }
            else if (!result.IsSuccess)
            {
                message = result.Message ?? "Invalid email or password. Please try again.";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("token") || ex.Message.Contains("null"))
            {
                message = "Invalid email or password. Please try again.";
            }
            else
            {
                message = "Login failed. Please check your credentials and try again.";
            }
            isSuccess = false;
            Console.WriteLine($"Login error: {ex}");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }


    private Dictionary<string, string> ParseAllClaims(string jwtToken)
    {
        var claims = new Dictionary<string, string>();
        try
        {
            var parts = jwtToken.Split('.');
            if (parts.Length != 3) return claims;

            var payload = parts[1];
            var jsonBytes = ParseBase64WithoutPadding(payload);
            var keyValuePairs = JsonSerializer.Deserialize<Dictionary<string, JsonElement>>(jsonBytes.AsSpan());


            if (keyValuePairs != null)
            {
                foreach (var kvp in keyValuePairs)
                {
                    claims[kvp.Key] = kvp.Value.ToString();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error parsing claims: {ex}");
        }
        return claims;
    }

    private static byte[] ParseBase64WithoutPadding(string base64)
    {
        switch (base64.Length % 4)
        {
            case 2: base64 += "=="; break;
            case 3: base64 += "="; break;
        }
        return Convert.FromBase64String(base64);
    }
}
