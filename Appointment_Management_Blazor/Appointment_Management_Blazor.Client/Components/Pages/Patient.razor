@page "/patient"

@inject IPatientClientService PatientService
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime

<h3>Patients Management</h3>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading....</span>
        </div>
    </div>
}
else
{
    <div class="card">
        <div class="card-header">
            <div class="row">              
                <div class="col-md-6 text-right">
                    <input type="text" class="form-control" placeholder="Search..."
                           value="@searchValue"
                          @oninput="OnSearchInputChanged" />
                </div>
            </div>
        </div>
        <div class="card-body">
            @if (patients?.Data?.Any() == true)
            {
                <table class="table table-striped table-bordered">
                    <thead>
                        <tr>
                            <th>Full Name</th>
                            <th>Gender</th>
                            <th>Join Date</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var patient in patients.Data)
                        {
                            <tr>
                                <td>@patient?.FullName</td>
                                <td>@patient?.Gender</td>
                                <td>@patient?.JoinDate</td>
                                <td>@(patient?.Status == true ? "Active" : "Inactive")</td>
                                <td>
                                    <button class="btn btn-info btn-sm" @onclick="() => EditPatient(patient.Id)">Edit</button>
                                    <button class="btn btn-danger btn-sm ml-2" @onclick="() => DeletePatient(patient.Id)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="row">
                    <div class="col-md-6">
                        <span>Total records: @totalRecords</span>
                    </div>
                    <div class="col-md-6 text-right">
                        <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@(currentPage <= 1)">Previous</button>
                        <span class="mx-2">Page @currentPage of @((int)Math.Ceiling((double)totalRecords / pageSize))</span>
                        <button class="btn btn-secondary" @onclick="NextPage" disabled="@(currentPage* pageSize >= totalRecords)">Next</button>
                    </div>
                </div>
            }
            else
            {
                <div class="alert alert-info">No patients found.</div>
            }
        </div>
    </div>
}

@if (showDialog)
{
    <div class="modal" style="display:block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Patient</h5>
                    <button type="button" class="close" @onclick="CloseDialog">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@patientModel" OnValidSubmit="@HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label for="fullName">Full Name</label>
                            <InputText id="fullName" class="form-control" @bind-Value="patientModel.FullName" disabled />
                        </div>

                        <div class="form-group">
                            <label for="gender">Gender</label>
                            <InputText id="gender" class="form-control" @bind-Value="patientModel.Gender" disabled />
                        </div>

                        <div class="form-group">
                            <label for="joinDate">Join Date</label>
                            <InputDate id="joinDate" class="form-control" @bind-Value="patientModel.JoinDate" disabled />
                        </div>

                        <div class="form-group">
                            <label for="status">Status</label>
                            <InputSelect id="status" class="form-control" @bind-Value="patientModel.Status">
                                <option value="true">Active</option>
                                <option value="false">Inactive</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => patientModel.Status)" />
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseDialog">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>

                </div>
            </div>
        </div>
    </div>
}

@code {
    private PatientListResponse patients = new();
    private PatientViewModel patientModel = new();
    private int? selectedPatientId = null;
    private bool showDialog = false;
    private bool isLoading = true;
    private string searchValue = string.Empty;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalRecords = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadPatients();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadPatients();
    }

    private async Task LoadPatients()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var filters = new PatientFilterModel
            {
                Draw = currentPage,
                Start = (currentPage - 1) * pageSize,
                Length = pageSize,
                SearchValue = searchValue?.Trim()
            };

            patients = await PatientService.GetAllPatientsAsync(filters);
            totalRecords = patients.RecordsTotal;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading patients: {ex.Message}");
            patients = new PatientListResponse();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }


    private async Task EditPatient(int id)
    {
        var patient = await PatientService.GetPatientByIdAsync(id);
        if (patient != null)
        {
            patientModel = new PatientViewModel
            {
                Id = patient.Id,
                FullName = patient.FullName,
                Gender = patient.Gender,
                JoinDate = DateTime.Parse(patient.JoinDate), 
                Status = patient.Status
            };
            selectedPatientId = id;
            showDialog = true;
        }
    }
    private async Task DeletePatient(int id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this patient?");
        if (!confirmed)
            return;

        try
        {
            var result = await PatientService.DeletePatientAsync(id);
            if (result.Success)
            {
                await LoadPatients();
                await JSRuntime.InvokeVoidAsync("alert", "Patient deleted successfully");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", result.Message ?? "Delete operation failed");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }



    private async Task HandleValidSubmit()
    {
        try
        {
            if (selectedPatientId.HasValue)
            {
                var result = await PatientService.UpdatePatientAsync(patientModel);
                if (result.Success)
                {
                    showDialog = false;
                    await LoadPatients();
                    await JSRuntime.InvokeVoidAsync("alert", "Patient updated successfully");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", result.Message ?? "Operation failed");
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private void CloseDialog()
    {
        showDialog = false;
    }

    private async Task NextPage()
    {
        currentPage++;
        await LoadPatients();
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadPatients();
        }
    }
    private async Task OnSearchInputChanged(ChangeEventArgs e)
    {
        searchValue = e.Value?.ToString();
        await LoadPatients();
    }

}