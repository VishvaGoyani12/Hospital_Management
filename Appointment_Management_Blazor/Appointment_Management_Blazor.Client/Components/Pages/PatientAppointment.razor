@page "/patientappointment"
@inject IPatientAppointmentClientService AppointmentService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Appointment Management</h3>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading....</span>
        </div>
    </div>
}
else
{
    <div class="card">
        <div class="card-header">
            <div class="row">
                <div class="col-md-6">
@*                     <button class="btn btn-primary" @onclick="AddNewAppointment">Add New Appointment</button>
 *@                </div>
                <div class="col-md-6">
                    <div class="row">
                        <div class="col-md-4">
                            <select class="form-control" @bind="StatusFilter">
                                <option value="">All Statuses</option>
                                <option value="Pending">Pending</option>
                                <option value="Confirmed">Confirmed</option>
                                <option value="Cancelled">Cancelled</option>
                                <option value="Completed">Completed</option>
                            </select>
                        </div>
                        <div class="col-md-8">
                            <input type="text" class="form-control" placeholder="Search..." @bind="searchValue" @bind:event="oninput" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body">
            @if (appointments?.Data?.Any() == true)
            {
                <table class="table table-striped table-bordered">
                    <thead>
                        <tr>
                            <th>Patient</th>
                            <th>Doctor</th>
                            <th>Date</th>
                            <th>Description</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var appointment in appointments.Data)
                        {
                            <tr>
                                <td>@appointment.PatientName</td>
                                <td>@appointment.DoctorName</td>
                                <td>@appointment.AppointmentDateString</td>
                                <td>@appointment.Description</td>
                                <td>@appointment.Status</td>
                               @*  <td>
                                    <button class="btn btn-info btn-sm" @onclick="() => EditAppointment(appointment.Id)">Edit</button>
                                    <button class="btn btn-danger btn-sm ml-2" @onclick="() => DeleteAppointment(appointment.Id)">Delete</button>
                                </td> *@
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="row">
                    <div class="col-md-6">
                        <span>Total records: @totalRecords</span>
                    </div>
                    <div class="col-md-6 text-right">
                        <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@(currentPage <= 1)">Previous</button>
                        <span class="mx-2">Page @currentPage of @((int)Math.Ceiling((double)totalRecords / pageSize))</span>
                        <button class="btn btn-secondary" @onclick="NextPage" disabled="@(currentPage* pageSize >= totalRecords)">Next</button>
                    </div>
                </div>
            }
            else
            {
                <div class="alert alert-info">No appointments found.</div>
            }
        </div>
    </div>
}

@* @if (showDialog)
{
    <div class="modal" style="display:block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(selectedAppointmentId == 0 ? "Add New Appointment" : "Edit Appointment")</h5>
                    <button type="button" class="close" @onclick="CloseDialog">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="appointmentModel" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label for="appointmentDate">Appointment Date</label>
                            <InputDate id="appointmentDate" class="form-control" @bind-Value="appointmentModel.AppointmentDate" />
                            <ValidationMessage For="@(() => appointmentModel.AppointmentDate)" />
                        </div>

                        <div class="form-group">
                            <label for="doctor">Doctor</label>
                            <select id="doctor" class="form-control" @bind="appointmentModel.DoctorId" @onchange="DoctorChanged">
    <option value="">Select Doctor</option>
    @foreach (var doctor in availableDoctors)
    {
        <option value="@doctor.Id">@doctor.FullName</option>
    }
</select>

                            <ValidationMessage For="@(() => appointmentModel.DoctorId)" />
                        </div>

                        <div class="form-group">
                            <label for="description">Description</label>
                            <InputTextArea id="description" class="form-control" @bind-Value="appointmentModel.Description" />
                            <ValidationMessage For="@(() => appointmentModel.Description)" />
                        </div>

                        @if (selectedAppointmentId != 0)
                        {
                            <div class="form-group">
                                <label for="status">Status</label>
                                <select id="status" class="form-control" @bind="appointmentModel.Status">
                                    <option value="Pending">Pending</option>
                                    <option value="Confirmed">Confirmed</option>
                                    <option value="Cancelled">Cancelled</option>
                                    <option value="Completed">Completed</option>
                                </select>
                            </div>
                        }

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseDialog">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
} *@

@code {
    private AppointmentListResponse appointments = new();
    private AppointmentViewModel appointmentModel = new();
    private List<DoctorDropdownDto> availableDoctors = new();
    private int selectedAppointmentId = 0;
    private bool showDialog = false;
    private bool isLoading = true;
    private string searchValue = string.Empty;
    private string StatusFilter = "";
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalRecords = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadAppointments();
        await LoadDoctors();
    }

    private async Task LoadAppointments()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var filters = new AppointmentFilterModel
            {
                Draw = currentPage,
                Start = (currentPage - 1) * pageSize,
                Length = pageSize,
                SearchValue = searchValue,
                Status = StatusFilter
            };

            appointments = await AppointmentService.GetAllAppointmentsAsync(filters);
            totalRecords = appointments.RecordsTotal;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading appointments: {ex.Message}");
            appointments = new AppointmentListResponse();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadDoctors(DateTime? selectedDate = null)
    {
        availableDoctors = await AppointmentService.GetAvailableDoctorsAsync(
            selectedDate ?? appointmentModel.AppointmentDate, 
            appointmentModel.DoctorId > 0 ? appointmentModel.DoctorId : null);
    }

    private async Task DoctorChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int doctorId))
        {
            appointmentModel.DoctorId = doctorId;
            await LoadDoctors();
        }
        else
        {
            appointmentModel.DoctorId = null;
        }

    }

    // private void AddNewAppointment()
    // {
    //     appointmentModel = new AppointmentViewModel
    //     {
    //         AppointmentDate = DateTime.Now.AddDays(1)
    //     };
    //     selectedAppointmentId = 0;
    //     showDialog = true;
    // }

    // private async Task EditAppointment(int id)
    // {
    //     var appointment = await AppointmentService.GetAppointmentByIdAsync(id);
    //     if (appointment != null)
    //     {
    //         appointmentModel = new AppointmentViewModel
    //         {
    //             Id = appointment.Id,
    //             AppointmentDate = appointment.AppointmentDate,
    //             Description = appointment.Description,
    //             Status = appointment.Status,
    //             DoctorId = appointment.DoctorId
    //         };
    //         selectedAppointmentId = id;
    //         await LoadDoctors(appointmentModel.AppointmentDate);
    //         showDialog = true;
    //     }
    // }

    // private async Task DeleteAppointment(int id)
    // {
    //     bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this appointment?");
    //     if (confirm)
    //     {
    //         var result = await AppointmentService.DeleteAppointmentAsync(id);
    //         if (result.Success)
    //         {
    //             await LoadAppointments();
    //         }
    //     }
    // }

    private async Task HandleValidSubmit()
    {
        try
        {
            ApiResponse result;
            if (selectedAppointmentId == 0)
            {
                result = await AppointmentService.CreateAppointmentAsync(appointmentModel);
            }
            else
            {
                result = await AppointmentService.UpdateAppointmentAsync(appointmentModel);
            }

            if (result.Success)
            {
                showDialog = false;
                await LoadAppointments();
                await JSRuntime.InvokeVoidAsync("alert", result.Message ?? "Operation completed successfully");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", result.Message ?? "Operation failed");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private void CloseDialog()
    {
        showDialog = false;
    }

    private async Task NextPage()
    {
        currentPage++;
        await LoadAppointments();
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadAppointments();
        }
    }
}