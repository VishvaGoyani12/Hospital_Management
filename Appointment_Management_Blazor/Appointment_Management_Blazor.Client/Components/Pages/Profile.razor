@page "/profile"
@using Appointment_Management_Blazor.Shared.HelperModel
@inject IAccountClientService AccountService
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

<h3>My Profile</h3>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading profile...</p>
    </div>
}
else if (profileResponse != null && profileResponse.IsSuccess)
{
    <EditForm Model="@profileResponse.Profile" OnValidSubmit="@HandleUpdateProfile">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mb-3">
            <label class="form-label">Full Name</label>
            <InputText @bind-Value="@profileResponse.Profile.FullName" class="form-control" />
            <ValidationMessage For="@(() => profileResponse.Profile.FullName)" />
        </div>

        <div class="form-group mb-3">
            <label class="form-label">Gender</label>
            <InputSelect @bind-Value="@profileResponse.Profile.Gender" class="form-control">
                <option value="">Select Gender</option>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
                <option value="Other">Other</option>
            </InputSelect>
            <ValidationMessage For="@(() => profileResponse.Profile.Gender)" />
        </div>

        <div class="form-group mb-3">
            <label class="form-label">Email</label>
            <InputText @bind-Value="@profileResponse.Profile.Email" class="form-control" disabled />
            <ValidationMessage For="@(() => profileResponse.Profile.Email)" />
        </div>

        <button type="submit" class="btn btn-primary">Update Profile</button>
    </EditForm>
}
else
{
    <div class="alert alert-danger">
        @errorMessage
        @if (isUnauthorized)
        {
            <div class="mt-2">
                <a href="/login" class="btn btn-sm btn-outline-primary">Login Again</a>
            </div>
        }
    </div>
}

@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert @(IsSuccess ? "alert-success" : "alert-danger") mt-3">@Message</div>
}

@code {
    private ProfileResponse profileResponse = new();
    private string Message { get; set; }
    private string errorMessage = "Failed to load profile";
    private bool IsSuccess { get; set; }
    private bool isLoading = true;
    private bool isUnauthorized;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Check if we have a token first
            var token = await LocalStorage.GetItemAsStringAsync("jwt_token");
            if (string.IsNullOrWhiteSpace(token))
            {
                isUnauthorized = true;
                errorMessage = "You need to login to view your profile";
                isLoading = false;
                return;
            }

            profileResponse = await AccountService.GetProfileAsync();

            if (profileResponse == null || !profileResponse.IsSuccess)
            {
                errorMessage = profileResponse?.Message ?? "Failed to load profile";

                if (errorMessage.Contains("expired") || errorMessage.Contains("Unauthorized"))
                {
                    isUnauthorized = true;
                    await LocalStorage.RemoveItemAsync("jwt_token");
                }
            }
            else if (profileResponse.Profile == null)
            {
                // Initialize empty profile if null
                profileResponse.Profile = new UpdateProfileViewModel();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine($"Profile error: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleUpdateProfile()
    {
        try
        {
            if (profileResponse?.Profile == null) return;

            var result = await AccountService.UpdateProfileAsync(profileResponse.Profile);

            IsSuccess = result.IsSuccess;
            Message = result.Message;

            if (IsSuccess)
            {
                // Reload the profile to get any server-side updates
                await OnInitializedAsync();
            }
        }
        catch (Exception ex)
        {
            IsSuccess = false;
            Message = $"Update failed: {ex.Message}";
        }

        StateHasChanged();
    }
}