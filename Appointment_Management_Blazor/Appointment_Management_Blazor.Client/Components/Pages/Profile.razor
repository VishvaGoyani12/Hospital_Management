@page "/profile"
@using Appointment_Management_Blazor.Shared.HelperModel
@using Microsoft.AspNetCore.Components.Forms
@inject IAccountClientService AccountService
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

<h3 class="mb-4">My Profile</h3>

@if (isLoading)
{
    <div class="text-center my-5">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading profile...</p>
    </div>
}
else if (profileResponse != null && profileResponse.IsSuccess)
{
    <div class="card shadow-lg border-0" style="max-width: 600px; margin: 0 auto;">
        <div class="card-body p-4">
            <EditForm Model="@profileResponse.Profile" OnValidSubmit="@HandleUpdateProfile" enctype="multipart/form-data">
                <DataAnnotationsValidator />

                @if (userRoles.Contains("Doctor", StringComparer.OrdinalIgnoreCase) || userRoles.Contains("Patient", StringComparer.OrdinalIgnoreCase))
                {
                    <div class="mb-4 text-center">
                        @if (!string.IsNullOrEmpty(profileResponse.ProfileImagePath))
                        {
                            <img src="@profileResponse.ProfileImagePath"
                                 class="rounded-circle shadow-sm"
                                 style="width: 120px; height: 120px; object-fit: cover;"
                                 alt="Profile Picture" />
                        }
                        else
                        {
                            <div class="rounded-circle bg-light d-flex align-items-center justify-content-center"
                                 style="width: 120px; height: 120px; margin: 0 auto;">
                                <i class="bi bi-person-fill fs-1 text-secondary"></i>
                            </div>
                        }

                        <div class="mt-3">
                            <label for="fileUpload" class="btn btn-outline-primary btn-sm">
                                <i class="bi bi-upload me-1"></i> Change Photo
                            </label>
                            <InputFile id="fileUpload"
                                       class="d-none"
                                       accept="image/*"
                                       OnChange="@HandleFileSelected" />
                            @if (!string.IsNullOrEmpty(profileResponse.ProfileImagePath))
                            {
                                <button type="button" class="btn btn-outline-danger btn-sm ms-2" @onclick="RemoveProfileImage">
                                    <i class="bi bi-trash me-1"></i> Remove
                                </button>
                            }
                        </div>
                    </div>
                }


                <div class="mb-3">
                    <label class="form-label">Full Name</label>
                    <InputText @bind-Value="@profileResponse.Profile.FullName" class="form-control" />
                    <ValidationMessage For="@(() => profileResponse.Profile.FullName)" class="text-danger small" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Gender</label>
                    <InputSelect @bind-Value="@profileResponse.Profile.Gender" class="form-control">
                        <option value="">Select Gender</option>
                        <option value="Male">Male</option>
                        <option value="Female">Female</option>
                        <option value="Other">Other</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => profileResponse.Profile.Gender)" class="text-danger small" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Email</label>
                    <InputText @bind-Value="@profileResponse.Profile.Email" class="form-control" disabled />
                </div>

                <div class="d-grid">
                    <button type="submit" class="btn btn-primary fw-semibold">
                        @if (isUpdating)
                        {
                            <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                            <span>Updating...</span>
                        }
                        else
                        {
                            <span>Update Profile</span>
                        }
                    </button>
                </div>
            </EditForm>

            @if (!string.IsNullOrEmpty(Message))
            {
                <div class="alert mt-3 @(IsSuccess ? "alert-success" : "alert-danger") shadow-sm">
                    @Message
                </div>
            }
        </div>
    </div>
}
else
{
    <div class="alert alert-danger shadow-sm">
        @errorMessage
        @if (isUnauthorized)
        {
            <div class="mt-2">
                <a href="/login" class="btn btn-sm btn-outline-primary">Login Again</a>
            </div>
        }
    </div>
}

@code {
    private List<string> userRoles = new();

    private ProfileResponse profileResponse = new();
    private IBrowserFile selectedFile;
    private string Message { get; set; }
    private string errorMessage = "Failed to load profile";
    private bool IsSuccess { get; set; }
    private bool isLoading = true;
    private bool isUpdating = false;
    private bool isUnauthorized;
    private long maxFileSize = 1024 * 1024 * 5; 

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Check if we have a token first
            var token = await LocalStorage.GetItemAsStringAsync("jwt_token");
            userRoles = JwtParser.GetRolesFromToken(token).ToList();

            if (string.IsNullOrWhiteSpace(token))
            {
                isUnauthorized = true;
                errorMessage = "You need to login to view your profile";
                isLoading = false;
                return;
            }

            profileResponse = await AccountService.GetProfileAsync();

            if (profileResponse == null || !profileResponse.IsSuccess)
            {
                errorMessage = profileResponse?.Message ?? "Failed to load profile";

                if (errorMessage.Contains("expired") || errorMessage.Contains("Unauthorized"))
                {
                    isUnauthorized = true;
                    await LocalStorage.RemoveItemAsync("jwt_token");
                }
            }
            else if (profileResponse.Profile == null)
            {
                // Initialize empty profile if null
                profileResponse.Profile = new UpdateProfileViewModel();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine($"Profile error: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

               var result = await AccountService.UploadProfileImageAsync(selectedFile);
        IsSuccess = result.IsSuccess;
        Message = result.Message;

        if (IsSuccess)
        {
            profileResponse.Profile.ProfileImagePath = result.ProfileImagePath;
        }

        StateHasChanged();
    }

    private async Task RemoveProfileImage()
    {
        try
        {
            profileResponse.Profile.ImageFile = null;
            profileResponse.ProfileImagePath = null;
            profileResponse.Profile.ProfileImagePath = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            IsSuccess = false;
            Message = $"Error removing image: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task HandleUpdateProfile()
    {
        isUpdating = true;
        Message = string.Empty;
        StateHasChanged();

        try
        {
            if (profileResponse?.Profile == null) return;

            // If there's a new image file, upload it first
            if (profileResponse.Profile.ImageFile != null)
            {
                var uploadResponse = await AccountService.UploadProfileImageAsync(profileResponse.Profile.ImageFile);

                if (!uploadResponse.IsSuccess)
                {
                    IsSuccess = false;
                    Message = uploadResponse.Message;
                    isUpdating = false;
                    StateHasChanged();
                    return;
                }

                // Update the profile image path in the model
                profileResponse.Profile.ProfileImagePath = uploadResponse.ProfileImagePath;
            }

            // Update the profile
            var result = await AccountService.UpdateProfileAsync(profileResponse.Profile);

            IsSuccess = result.IsSuccess;
            Message = result.Message;

            if (IsSuccess)
            {
                // Reload the profile to get any server-side updates
                await OnInitializedAsync();
            }
        }
        catch (Exception ex)
        {
            IsSuccess = false;
            Message = $"Update failed: {ex.Message}";
        }
        finally
        {
            isUpdating = false;
            StateHasChanged();
        }
    }
}