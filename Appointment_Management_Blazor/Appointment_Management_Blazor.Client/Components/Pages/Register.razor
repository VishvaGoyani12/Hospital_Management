@page "/register"

@using System.Linq.Expressions
@inject IAccountClientService AccountClientService
@inject NavigationManager Navigation

<h3 class="text-center mb-4 fw-semibold text-primary">Create Your Account</h3>

<div class="card shadow-lg border-0" style="max-width: 600px; margin: 0 auto;">
    <div class="card-body p-4">
        <EditForm EditContext="@editContext" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger mb-3" />

            <div class="mb-3">
                <label class="form-label">Full Name</label>
                <InputText @bind-Value="model.FullName" class="form-control" placeholder="John Doe"
                           @oninput="() => ClearValidationFor(() => model.FullName)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Email</label>
                <InputText @bind-Value="model.Email" class="form-control" placeholder="example@mail.com"
                           @oninput="() => ClearValidationFor(() => model.Email)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Gender</label>
                <InputSelect @bind-Value="model.Gender" class="form-select"
                             @onchange="() => ClearValidationFor(() => model.Gender)">
                    <option value="">-- Select Gender --</option>
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                </InputSelect>
            </div>

            <div class="mb-3">
                <label class="form-label">Join Date</label>
                <InputDate @bind-Value="model.JoinDate" class="form-control" disabled />
            </div>

            <div class="mb-3">
                <label class="form-label">Password</label>
                <InputText @bind-Value="model.Password" type="password" class="form-control"
                           @oninput="() => ClearValidationFor(() => model.Password)" />
            </div>

            <div class="mb-4">
                <label class="form-label">Confirm Password</label>
                <InputText @bind-Value="model.ConfirmPassword" type="password" class="form-control"
                           @oninput="() => ClearValidationFor(() => model.ConfirmPassword)" />
            </div>

            <div class="d-grid">
                <button type="submit" class="btn btn-primary fw-semibold" disabled="@isProcessing">
                    @if (isProcessing)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-2">Registering...</span>
                    }
                    else
                    {
                        <span>Register</span>
                    }
                </button>
            </div>
        </EditForm>

        @if (!string.IsNullOrEmpty(responseMessage))
        {
            <div class="alert mt-3 @(isSuccess ? "alert-success" : "alert-danger") shadow-sm">
                @responseMessage
            </div>
        }
    </div>
</div>


@code {
    private RegisterViewModel model { get; set; } = new RegisterViewModel();
    private string responseMessage = string.Empty;
    private bool isProcessing = false;
    private bool isSuccess = false;
    //public EditForm registerForm;
    private EditContext editContext;

    protected override void OnInitialized()
    {
        model = new RegisterViewModel { JoinDate = DateTime.Today }; // Proper initialization
        editContext = new EditContext(model);
    }


    public void ClearValidationFor(Expression<Func<object>> expression)
    {
        var fieldIdentifier = FieldIdentifier.Create(expression);
        editContext.NotifyFieldChanged(fieldIdentifier);
    }

    public async Task HandleRegister()
    {
        isProcessing = true;
        responseMessage = string.Empty;
        StateHasChanged();

        try
        {          
            var result = await AccountClientService.RegisterAsync(model);
            responseMessage = result.Message;
            isSuccess = result.IsSuccess;

            if (isSuccess)
            {
                responseMessage = "Email confirmation link sent. Please check your mail.";
            }
        }
        catch (Exception ex)
        {
            responseMessage = $"An error occurred: {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

}