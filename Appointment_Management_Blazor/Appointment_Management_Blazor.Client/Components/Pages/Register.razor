@page "/register"

@using System.Linq.Expressions
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using Appointment_Management_Blazor.Shared.HelperModel
@inject HttpClient _httpClient
@inject NavigationManager Navigation

<h3 class="text-center mb-4 fw-semibold text-primary">Create Your Account</h3>

<div class="card shadow-lg border-0" style="max-width: 600px; margin: 0 auto;">
    <div class="card-body p-4">
        <EditForm EditContext="@editContext" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label class="form-label">Full Name</label>
                <InputText @bind-Value="model.FullName" class="form-control" placeholder="John Doe"
                           @oninput="() => ClearValidationFor(() => model.FullName)" />
                <ValidationMessage For="@(() => model.FullName)" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label">Email</label>
                <InputText @bind-Value="model.Email" class="form-control" placeholder="example@mail.com"
                           @oninput="() => ClearValidationFor(() => model.Email)" />
                <ValidationMessage For="@(() => model.Email)" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label">Gender</label>
                <InputSelect @bind-Value="model.Gender" class="form-select"
                             @onchange="() => ClearValidationFor(() => model.Gender)">
                    <option value="">-- Select Gender --</option>
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                </InputSelect>
                <ValidationMessage For="@(() => model.Gender)" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label">Join Date</label>
                <InputDate @bind-Value="model.JoinDate" class="form-control" disabled />
                <ValidationMessage For="@(() => model.JoinDate)" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label">Password</label>
                <InputText @bind-Value="model.Password" type="password" class="form-control"
                           @oninput="() => ClearValidationFor(() => model.Password)" />
                <ValidationMessage For="@(() => model.Password)" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label">Confirm Password</label>
                <InputText @bind-Value="model.ConfirmPassword" type="password" class="form-control"
                           @oninput="() => ClearValidationFor(() => model.ConfirmPassword)" />
                <ValidationMessage For="@(() => model.ConfirmPassword)" class="text-danger" />
            </div>

            <div class="mb-4">
                <label class="form-label">Profile Image</label>
                <InputFile OnChange="HandleFileSelected" class="form-control" />
            </div>

            <div class="d-grid">
                <button type="submit" class="btn btn-primary fw-semibold" disabled="@isProcessing">
                    @if (isProcessing)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-2">Registering...</span>
                    }
                    else
                    {
                        <span>Register</span>
                    }
                </button>
            </div>
        </EditForm>

        @if (!string.IsNullOrEmpty(responseMessage))
        {
            <div class="alert mt-3 @(isSuccess ? "alert-success" : "alert-danger") shadow-sm">
                @responseMessage
            </div>
        }
    </div>
</div>

@code {
    private ClientRegisterModel model = new() { JoinDate = DateTime.Today };
    private string responseMessage = string.Empty;
    private bool isProcessing = false;
    private bool isSuccess = false;
    private EditContext editContext;

    protected override void OnInitialized()
    {
        editContext = new EditContext(model);
    }

    private void ClearValidationFor(Expression<Func<object>> expression)
    {
        var fieldIdentifier = FieldIdentifier.Create(expression);
        editContext.NotifyFieldChanged(fieldIdentifier);
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        model.ProfileImage = e.File;
    }

    private async Task HandleRegister()
    {
        isProcessing = true;
        responseMessage = string.Empty;

        try
        {
            var content = new MultipartFormDataContent
            {
                { new StringContent(model.FullName ?? ""), "FullName" },
                { new StringContent(model.Email ?? ""), "Email" },
                { new StringContent(model.Gender ?? ""), "Gender" },
                { new StringContent(model.JoinDate.ToString("yyyy-MM-dd")), "JoinDate" },
                { new StringContent(model.Password ?? ""), "Password" },
                { new StringContent(model.ConfirmPassword ?? ""), "ConfirmPassword" }
            };

            if (model.ProfileImage is not null)
            {
                var stream = model.ProfileImage.OpenReadStream(1024 * 1024 * 5); // 5MB limit
                content.Add(new StreamContent(stream), "ProfileImage", model.ProfileImage.Name);
            }

            var response = await _httpClient.PostAsync("api/account/register", content);
            var result = await response.Content.ReadFromJsonAsync<AuthResponse>();

            isSuccess = result?.IsSuccess ?? false;
            responseMessage = result?.Message ?? "Unknown error occurred";
        }
        catch (Exception ex)
        {
            isSuccess = false;
            responseMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }
    
}
