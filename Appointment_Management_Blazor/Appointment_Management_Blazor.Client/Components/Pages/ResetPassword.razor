@page "/reset-password"

@inject IAccountClientService AccountService
@inject NavigationManager NavigationManager

<h3 class="mb-4">Reset Password</h3>

<div class="card shadow-lg border-0" style="max-width: 600px; margin: 0 auto;">
    <div class="card-body p-4">
        <EditForm Model="@Model" OnValidSubmit="@HandleResetPassword">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger mb-3" />

            <InputHidden name="token" value="@Model.Token" />
            <InputHidden name="email" value="@Model.Email" />

            <div class="mb-3">
                <label class="form-label">New Password</label>
                <InputText type="password" @bind-Value="@Model.Password" class="form-control" />
                <ValidationMessage For="@(() => Model.Password)" class="text-danger small" />
            </div>

            <div class="mb-3">
                <label class="form-label">Confirm New Password</label>
                <InputText type="password" @bind-Value="@Model.ConfirmPassword" class="form-control" />
                <ValidationMessage For="@(() => Model.ConfirmPassword)" class="text-danger small" />
            </div>

            <div class="d-grid">
                <button type="submit" class="btn btn-primary fw-semibold">
                    Reset Password
                </button>
            </div>
        </EditForm>

        @if (!string.IsNullOrEmpty(Message))
        {
            <div class="alert mt-3 @(IsSuccess ? "alert-success" : "alert-danger") shadow-sm">
                @Message
            </div>
        }
    </div>
</div>



@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string Token { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "email")]
    public string Email { get; set; }

    private ResetPasswordViewModel Model { get; set; } = new ResetPasswordViewModel();
    private string Message { get; set; }
    private bool IsSuccess { get; set; }

    protected override void OnInitialized()
    {
        Model.Token = Token;
        Model.Email = Email;
    }

    private async Task HandleResetPassword()
    {
        try
        {
            var result = await AccountService.ResetPasswordAsync(Model);

            IsSuccess = result.IsSuccess;
            Message = result.Message;

            if (IsSuccess)
            {
                NavigationManager.NavigateTo("/reset-password-confirmation");
            }
        }
        catch (Exception ex)
        {
            IsSuccess = false;
            Message = $"An error occurred: {ex.Message}";
        }
    }
}